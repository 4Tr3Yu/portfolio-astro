---
import Bg from "./Bg.astro";
import Close from "../icons/Close.astro";
import SocialButton from "./SocialButton.astro";
import { experienceData } from "../../data/experience";
interface Props {
	id: string;
}

const { id } = Astro.props;
const buttonsStyles = (name) => {
	const formatName = name.split(' ').join('-').toLowerCase();
	const baseStyles = "open-modal text-xs px-3 py-2 mx-2"
	return id === formatName ? `${baseStyles} active` : baseStyles;
};
---
<div
  id={`modal-${id}`}
  data-modal={id}
  class="modal-container fixed inset-0 bg-black bg-opacity-95 flex flex-col items-center justify-center z-20 px-6 hidden shadow-lg">
	 <nav class="flex ">
		{experienceData.map((exp) => (
			<SocialButton extraStyles={buttonsStyles(exp.company)} dataModal={`modal-${exp.company.toLowerCase().split(' ').join('-')}`}>
				{exp.company.split(' ').map(word => word.split('')[0])}
			</SocialButton>
		))}
	</nav> 
  <div
    class="bg-crimson/25 border border-crimson p-6 rounded-lg shadow-lg max-w-lg w-full relative max-h-[90vh] overflow-y-scroll modal-experience-dialog z-50">
    <button
      data-modal={`modal-${id}`}
      class="close-modal sticky top-0 left-full -mr-4"
      id="close-modal"
      aria-label="Close Modal">
      	<Close class="size-6" />
    </button>
    <slot />
</div>

  <Bg modalControl="modal-control-close" idModal={`modal-${id}`} />
</div>
<script>
	const modals = document.querySelectorAll(".modal-container");
	const modalsOverlay = document.querySelectorAll(".modal-control-close");
	const openModalsBtns = document.querySelectorAll(".open-modal");
	const closeModalBtns = document.querySelectorAll("#close-modal");
	const body = document.querySelector("body");

	const closeModal = (modal) => {
		if (modal.classList.contains("hidden") ) return;
		modal.classList.add("hidden");
		body.classList.remove("modal-open");
	};

	const toggleModal = (id, action) => {
		const modal = document.querySelector(`#${id}`);
		modals.forEach((modalContainer) => {
			closeModal(modalContainer)
		});

		if (action === "close") {
			closeModal(modal);
			return;
		}
		modal.classList.remove("hidden");
		body.classList.add("modal-open");
	};

	openModalsBtns.forEach((btn: HTMLButtonElement) => {
	  btn.addEventListener("click", () => toggleModal(btn.dataset.modal, "open"));
	});
  
	closeModalBtns.forEach((btn: HTMLButtonElement) => {
	  btn.addEventListener("click", () => toggleModal(btn.dataset.modal, "close"));
	});
  
	modalsOverlay.forEach((modal: HTMLDivElement) => {
	  modal.addEventListener("click", (e) => toggleModal(modal.dataset.modal, "close"));
	});
	
	window.addEventListener("keydown", (e) => {
	  if (e.key === "Escape") {
		modals.forEach((modal) => {
		  closeModal(modal);
		});
	  }
	});
</script>
<style>
  .modal-container {
    transition: all 0.3s;
  }
  .modal-experience-dialog::-webkit-scrollbar {
    width: 12px;
  }

  .modal-experience-dialog::-webkit-scrollbar-track {
    background: transparent;
  }

  .modal-experience-dialog::-webkit-scrollbar-thumb {
    position: absolute;
    right: -2px;
    background: linear-gradient(180deg, transparent 25%, rgb(86, 5, 5) 90%);
    border-radius: 8px;
  }
</style>
